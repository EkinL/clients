{# templates/image/upload.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
	<h1>Uploader une image (jpeg png) max 4mo</h1>
	<span>Image d'exemple :
		<a href="https://i.ibb.co/5gGK2P28/IMG-1906.jpg" download class="text-blue-500 font-bold hover:underline">Afficher</a>
	</span>
	<hr class="my-4">

	{% for message in app.flashes('success') %}
		<div class=" alert alert-success">
			{{ message }}
		</div>
	{% endfor %}

	{% for message in app.flashes('error') %}
		<div class="alert alert-danger">
			{{ message }}
		</div>
	{% endfor %}

	<form method="post" enctype="multipart/form-data">
		<input type="file" name="image" accept="image/*" required>
		<button type="submit">Uploader</button>
	</form>

	{% if filename is defined %}
		<h2>Image upload√©e :</h2>
		<img src="{{ asset('uploads/images/' ~ filename) }}" alt="Image upload√©e">

		<h2>R√©sultats du traitement :</h2>

		<div id="preprocess-result">
			<h3>Image pr√©trait√©e :</h3>
			<img id="preprocessedImage" src="" alt="Image pr√©trait√©e">
		</div>

		<div id="generate-mvs-result">
			<h3>Vues multiples g√©n√©r√©es :</h3>
			<img id="generatedMvsImage" src="" alt="Vues multiples g√©n√©r√©es">
		</div>

		<div id="model-viewer-container">
			<h3>Mod√®le 3D :</h3>
			<script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
			<model-viewer id="modelViewer" src="" alt="Mod√®le 3D" auto-rotate camera-controls></model-viewer>
		</div>

		<div id="result">Traitement en cours...</div>

		<script type="module">
			import {client} from "https://cdn.jsdelivr.net/npm/@gradio/client/dist/index.min.js";

async function processImage() {
const app = await client("TencentARC/InstantMesh");
const imagePath = "{{ asset('uploads/images/' ~ filename) }}";
const response = await fetch(imagePath);
const imageBlob = await response.blob();

try {
console.log("üîÑ Envoi de l'image √† /preprocess...");
const preprocessResult = await app.predict("/preprocess", [imageBlob, true]);

if (preprocessResult ?. data ?. length > 0 && preprocessResult.data[0] ?. url) {
const processedImageUrl = preprocessResult.data[0].url;
console.log("‚úÖ Image pr√©trait√©e :", processedImageUrl);
document.getElementById('preprocessedImage').src = processedImageUrl;

console.log("üîÑ T√©l√©chargement de l'image pr√©trait√©e pour la convertir en Blob...");
const processedImageResponse = await fetch(processedImageUrl);
const processedImageBlob = await processedImageResponse.blob();

console.log("üîÑ Envoi de l'image pr√©trait√©e (en Blob) √† /generate_mvs...");
const generateMvsResult = await app.predict("/generate_mvs", [processedImageBlob, 40, 1]);

if (generateMvsResult ?. data ?. length > 0 && generateMvsResult.data[0] ?. url) {
const generatedMvsImageUrl = generateMvsResult.data[0].url;
console.log("‚úÖ Vues multiples g√©n√©r√©es :", generatedMvsImageUrl);
document.getElementById('generatedMvsImage').src = generatedMvsImageUrl;

console.log("üîÑ Appel √† /make3d pour g√©n√©rer le mod√®le 3D...");
const make3dResult = await app.predict("/make3d", []);

if (make3dResult ?. data ?. length > 1 && make3dResult.data[1] ?. url) {
const glbModelUrl = make3dResult.data[1].url;
console.log("‚úÖ Mod√®le 3D GLB g√©n√©r√© :", glbModelUrl);

document.getElementById('modelViewer').src = glbModelUrl;
document.getElementById('result').innerHTML = `<p>Mod√®le 3D g√©n√©r√© avec succ√®s.</p>`;

// üîΩüîΩüîΩ Sauvegarde du r√©sultat dans la base de donn√©es üîΩüîΩüîΩ
fetch("{{ path('save_result') }}", {
method: "POST",
headers: {
"Content-Type": "application/json"
},
body: JSON.stringify(
{image_id: {{ image_id }}, result_filename: glbModelUrl}
)
}).then(response => response.json()).then(data => console.log("‚úÖ R√©sultat sauvegard√©:", data)).catch(error => console.error("‚ùå Erreur lors de la sauvegarde:", error));
} else {
console.error("‚ùå Erreur lors de la g√©n√©ration du mod√®le 3D", make3dResult);
document.getElementById('result').innerText = 'Erreur lors de la g√©n√©ration du mod√®le 3D.';
}
} else {
console.error("‚ùå Erreur lors de la g√©n√©ration des vues multiples", generateMvsResult);
document.getElementById('result').innerText = `Erreur /generate_mvs : ${
generateMvsResult ?. message || "Probl√®me inconnu"
}`;
}
} else {
console.error("‚ùå Erreur lors du pr√©traitement de l'image", preprocessResult);
document.getElementById('result').innerText = `Erreur /preprocess : ${
preprocessResult ?. message || "Probl√®me inconnu"
}`;
}
} catch (error) {
console.error("‚ùå Erreur lors du traitement de l'image:", error);
document.getElementById('result').innerText = `Erreur: ${
error.message || "Une erreur est survenue."
}`;
}
}

processImage();
		</script>

		{% if result_filename is defined %}
			<h2>Fichier 3D g√©n√©r√© :</h2>
			<a href="{{ result_filename }}" download="modele_3d.glb">T√©l√©charger le mod√®le 3D</a>
		{% endif %}
	{% endif %}
{% endblock %}
